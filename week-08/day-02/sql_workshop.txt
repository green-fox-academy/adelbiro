EXERCISE 0 --- SQLBOLT 

Exercise 1 — Tasks

Id	Title		Director	Year	Length_minutes
1	Toy Story	John Lasseter	1995	81
2	A Bug's Life	John Lasseter	1998	95
3	Toy Story 2	John Lasseter	1999	93
4	Monsters, Inc.	Pete Docter	2001	92
5	Finding Nemo	Andrew Stanton	2003	107
6	The Incredibles	Brad Bird	2004	116
7	Cars		John Lasseter	2006	117
8	Ratatouille	Brad Bird	2007	115
9	WALL-E		Andrew Stanton	2008	104
10	Up		Pete Docter	2009	101
11	Toy Story 3	Lee Unkrich	2010	103
12	Cars 2		John Lasseter	2011	120
13	Brave		Brenda Chapman	2012	102
14	Monsters University	Dan Scanlon	2013	110

Find the title of each film --SELECT title FROM movies;
Find the director of each film -- SELECT director FROM movies;
Find the title and director of each film -- SELECt title, director FROM movies;
Find the title and year of each film -- SELECT title, year FROM movies;
Find all the information about each film -- SELECT * FROM movies;

Exercise 2 — Tasks
Find the movie with a row id of 6 -- SELECT title FROM movies WHERE id = 6;
Find the movies released in the years between 2000 and 2010 -- SELECT title FROM movies WHERE year BETWEEN 2000 AND 2010;
Find the movies not released in the years between 2000 and 2010 -- SELECT title FROM movies WHERE year NOT BETWEEN 2000 AND 2010;
Find the first 5 Pixar movies and their release  year -- SELECT title, year FROM movies ORDER BY year LIMIT 5;

Exercise 3 — Tasks
Find all the Toy Story movies -- SELECT title FROM movies WHERE title LIKE "Toy Story%";
Find all the movies directed by John Lasseter -- SELECT title FROM movies WHERE director = "John Lasseter" ;
Find all the movies (and director) not directed by John Lasseter -- SELECT title FROM movies WHERE director != "John Lasseter" ;
Find all the WALL-* movies -- SELECT title FROM movies WHERE title LIKE "WALL-%";

Exercise 4 — Tasks
List all directors of Pixar movies (alphabetically), without duplicates -- SELECT DISTINCT director FROM movies ORDER BY director ;
List the last four Pixar movies released (ordered from most recent to least) -- SELECT title FROM movies ORDER BY year DESC LIMIT 4;
List the first five Pixar movies sorted alphabetically -- SELECT title FROM movies ORDER BY title ASC LIMIT 5;
List the next five Pixar movies sorted alphabetically -- SELECT title FROM movies ORDER BY title ASC LIMIT 5 OFFSET 5;

Exercise 13 — Tasks
Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
	 -- INSERT INTO movies (Title, Director, Year, Length_minutes) VALUES ("Toy Story 4", "john l", 2018, 96)
Toy Story 4 has been released to critical acclaim! It had a rating of 8.7,
	 and made 340 million domestically and 270 million internationally.Add the record to the BoxOffice table.
	 -- INSERT into Boxoffice (movie_id, Rating, domestic_sales, international_sales) VALUES(15, 8.7, 340000000, 270000000)

Exercise 14 — Tasks
The director for A Bug's Life is incorrect, it was actually directed by John Lasseter 
	-- UPDATE movies SET director = "John Lasseter" WHERE id =2;
The year that Toy Story 2 was released is incorrect, it was actually released in 1999 
	-- UPDATE movies SET year = 1999 WHERE title = "Toy Story 2";
Both the title and directory for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich 
	-- UPDATE movies SET title = "Toy Story 3", director = "Lee Unkrich" WHERE id = 11;

Exercise 15 — Tasks
This database is getting too big, lets remove all movies that were released before 2005. -- DELETE FROM movies WHERE year < 2005;
DELETE FROM movies WHERE director = "Andrew Stanton";


Exercise 16 — Tasks
Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints.  --- CREATE TABLE database (
   name TEXT, 
   version FLOAT, 
   download_count INTEGER)


EXERCISE 1 -- SQL MOVIE 

Movie-Rating Query Exercises
-------------------------------------------------------------------------------------------------------------------
Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 
-------------------------------------------------------------------------------------------------------------------
Q1.
Find the titles of all movies directed by Steven Spielberg. 

SELECT title FROM movie WHERE director = "Steven Spielberg";

Q2.
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 

SELECT DISTINCT movie.year FROM movie
	INNER JOIN rating
	ON movie.mid = rating.mid
    WHERE rating.stars > 3 ORDER BY movie.year ASC; 

Q3.
Find the titles of all movies that have no ratings. 

SELECT movie.title FROM movie
	LEFT JOIN rating
	ON movie.mid = rating.mid
	WHERE rating.stars IS NULL;

Q4.
Some reviewers didn't provide a date with their rating. 
Find the names of all reviewers who have ratings with a NULL value for the date. 

SELECT reviewer.name FROM reviewer
    INNER JOIN rating 
    ON reviewer.rid = rating.rid
    WHERE rating.ratingDate IS NULL;


Q5.
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. 
Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 

SELECT reviewer.name, movie.title, rating.stars, rating.ratingdate FROM rating
	INNER JOIN movie
	ON rating.mid = movie.mid
	INNER JOIN reviewer 
	ON rating.rid = reviewer.rid
	ORDER BY reviewer.name, movie.title, rating.stars;


 Movie-Rating Query Exercises Extras

Q1.
Find the names of all reviewers who rated Gone with the Wind. 

SELECT DISTINCT reviewer.name FROM reviewer 
LEFT JOIN rating
	ON reviewer.rid = rating.rid
	WHERE rating.mid = (SELECT rating.mid FROM rating
    		INNER JOIN movie
		ON rating.mid = movie.mid
    		WHERE movie.title = "Gone with the Wind");

Q2. --- not complete
For any rating where the reviewer is the same as the director of the movie, 
	return the reviewer name, movie title, and number of stars. 

SELECT reviever.name, movie.title, rating.stars FROM rating
	INNER JOIN movie
	























































